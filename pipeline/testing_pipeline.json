{
	"name": "testing_pipeline",
	"properties": {
		"activities": [
			{
				"name": "CheckDQs",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetdqQueries",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetdqQueries').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "TestDQonshield",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[shield_db].[test_dqs]",
								"storedProcedureParameters": {
									"query1": {
										"value": {
											"value": "@item().query1",
											"type": "Expression"
										},
										"type": "String"
									},
									"query2": {
										"value": {
											"value": "@item().query2",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "synwlwcaelumdevdw_private",
								"type": "LinkedServiceReference",
								"parameters": {
									"database_name": "synlwcaelumdevdwsql"
								}
							}
						}
					]
				}
			},
			{
				"name": "GetdqQueries",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "AutomatedTestingPy",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"dataset": {
						"referenceName": "shieldTesting",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "GetPii",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "AutomatedTestingPy",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "pii_treatment"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "FilterTable",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "GetPii",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetPii').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(string(item().table_name), pipeline().parameters.table_name)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FilterPartialTokens",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "FilterTable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterTable').output.value",
						"type": "Expression"
					},
					"condition": {
						"value": "@and(not(startswith(string(item().pii_stategy), 'partial')), not(equals(string(item().pii_stategy), 'support_col')))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "CheckTokenCollision",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "FilterPartialTokens",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterPartialTokens').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Stored procedure1",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[shield_db].[test_token_collision]",
								"storedProcedureParameters": {
									"column": {
										"value": {
											"value": "@item().column_name",
											"type": "Expression"
										},
										"type": "String"
									},
									"table": {
										"value": {
											"value": "@pipeline().parameters.table_name",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "synwlwcaelumdevdw_private",
								"type": "LinkedServiceReference",
								"parameters": {
									"database_name": "synlwcaelumdevdwsql"
								}
							}
						}
					]
				}
			},
			{
				"name": "DQResult",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "CheckTokenCollision",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "CheckDQs",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "SELECT * from [staging].[testing_dq_checks_stg]\nwhere run_id = '@{pipeline().RunId}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Shield_staging",
						"type": "DatasetReference",
						"parameters": {
							"TABLE_NAME": "testing_dq_checks_stg",
							"zone": "staging",
							"shield_db_name": "staging"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "TokenCollisionResult",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "CheckTokenCollision",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "CheckDQs",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlDWSource",
						"sqlReaderQuery": {
							"value": "SELECT * from [staging].[testing_token_collision_stg]\nwhere run_id = '@{pipeline().RunId}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Shield_staging",
						"type": "DatasetReference",
						"parameters": {
							"TABLE_NAME": "testing_token_collision_stg",
							"zone": "staging",
							"shield_db_name": "staging"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachDQ",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "DQResult",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('DQResult').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Lookup1",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[tst].[shield_test_results]\nSELECT '@{item().run_id}',\n'@{item().query2}',\n'@{equals('@{item().result1}', '@{item().result2}')}';\nSELECT 1\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "shield_test_results"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "ForEachTC",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "TokenCollisionResult",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('TokenCollisionResult').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Lookup1_copy1",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[tst].[shield_test_results]\nSELECT '@{item().run_id}',\n'@{concat(item().table,'_',item().column)}',\n'@{item().result}';\nSELECT 1\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "shield_test_results"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "AutomatedTestingPy",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "If Condition1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Repos/caelum/lowell.caelum.cdp.databricks/automation-testing/testing_script",
					"baseParameters": {
						"table_name": {
							"value": "@pipeline().parameters.table_name",
							"type": "Expression"
						},
						"year": {
							"value": "@pipeline().parameters.year",
							"type": "Expression"
						},
						"month": {
							"value": "@pipeline().parameters.month",
							"type": "Expression"
						},
						"day": {
							"value": "@pipeline().parameters.day",
							"type": "Expression"
						},
						"filename": {
							"value": "@pipeline().parameters.filename",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().parameters.run_id",
							"type": "Expression"
						},
						"source": {
							"value": "@pipeline().parameters.source",
							"type": "Expression"
						},
						"source_average": {
							"value": "@variables('average')",
							"type": "Expression"
						},
						"source_sum": {
							"value": "@variables('sum')",
							"type": "Expression"
						},
						"source_count_distinct": {
							"value": "@variables('count_distinct')",
							"type": "Expression"
						},
						"aggregateKey": {
							"value": "@pipeline().parameters.aggregateKey",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricks1",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "GetTableMetadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[GetTableMetadata]",
						"storedProcedureParameters": {
							"SourceName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.source",
									"type": "Expression"
								}
							},
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore_tablelist",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "sourceTableName",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "GetTableMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('GetTableMetadata').output.firstRow.src_table_name_flag,true)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SetSourceTableName2",
							"description": "This activity will set source table name with the value equal to that from adf metastore",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "sourceTableName",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SetSourceTableName",
							"description": "This activity will set source table name with the value equal to that from adf metastore",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "sourceTableName",
								"value": {
									"value": "@activity('GetTableMetadata').output.firstRow.src_table_name",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "sourceTableName",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(equals(activity('GetTableMetadata').output.firstRow.injestion_type, 'sqljson'))\n",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "GetSourceAggregates2",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT '9999' as average, '9999' as sum, '9999' as count_distinct",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "testSqlServer",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "SetSum2",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceAggregates2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "sum",
								"value": "@activity('GetSourceAggregates2').output.firstRow.sum"
							}
						},
						{
							"name": "SetAvg2",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceAggregates2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "average",
								"value": "@activity('GetSourceAggregates2').output.firstRow.average"
							}
						},
						{
							"name": "SetCD2",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceAggregates2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "count_distinct",
								"value": "@activity('GetSourceAggregates2').output.firstRow.count_distinct"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "GetSourceAggregates",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT cast(avg(CAST(@{pipeline().parameters.aggregateKey} as decimal(38,0))) as varchar(100)) average, cast(sum(CAST(@{pipeline().parameters.aggregateKey} as decimal(38,0)))as varchar(100)) sum, cast(COUNT(DISTINCT(@{pipeline().parameters.aggregateKey}))as varchar(100)) count_distinct\nFROM @{activity('GetTableMetadata').output.firstRow.system_db}.@{pipeline().parameters.system_db_schema}.@{variables('sourceTableName')}\nWHERE @{activity('GetTableMetadata').output.firstRow.delta_column} BETWEEN \n'@{pipeline().parameters.current_max}' AND '@{pipeline().parameters.source_max}'\nand len(RTRIM(LTRIM(@{pipeline().parameters.aggregateKey}))) > 0 and @{pipeline().parameters.aggregateKey} is not null",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "testSqlServer",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "SetSum1",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceAggregates",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "sum",
								"value": "@activity('GetSourceAggregates').output.firstRow.sum"
							}
						},
						{
							"name": "SetCD1",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceAggregates",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "count_distinct",
								"value": "@activity('GetSourceAggregates').output.firstRow.count_distinct"
							}
						},
						{
							"name": "SetAvg1",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "GetSourceAggregates",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "average",
								"value": "@activity('GetSourceAggregates').output.firstRow.average"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"run_id": {
				"type": "string",
				"defaultValue": "tn_30_09_2021"
			},
			"iterator_run_id": {
				"type": "string",
				"defaultValue": "CreditInfo_30_09_2021"
			},
			"table_name": {
				"type": "string"
			},
			"source": {
				"type": "string",
				"defaultValue": "CreditInfo"
			},
			"filename": {
				"type": "string"
			},
			"day": {
				"type": "string",
				"defaultValue": "29"
			},
			"month": {
				"type": "string",
				"defaultValue": "09"
			},
			"year": {
				"type": "string",
				"defaultValue": "2021"
			},
			"testing_flg": {
				"type": "string",
				"defaultValue": "1"
			},
			"aggregateKey": {
				"type": "string",
				"defaultValue": "ROW_ID"
			},
			"source_max": {
				"type": "string",
				"defaultValue": "2021-01-01T00:00:00Z"
			},
			"current_max": {
				"type": "string",
				"defaultValue": "1900-01-01T00:00:00Z"
			},
			"system_db_schema": {
				"type": "string",
				"defaultValue": "dbo"
			}
		},
		"variables": {
			"sourceTableName": {
				"type": "String"
			},
			"sum": {
				"type": "String"
			},
			"average": {
				"type": "String"
			},
			"count_distinct": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Testing_Pipelines/testingPipelines"
		},
		"annotations": [],
		"lastPublishTime": "2021-06-17T08:37:25Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}