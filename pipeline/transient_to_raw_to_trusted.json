{
	"name": "transient_to_raw_to_trusted",
	"properties": {
		"activities": [
			{
				"name": "GetPIITreatments",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderStoredProcedureName": "[dbo].[GetPIITreatments]",
						"storedProcedureParameters": {
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "''"
						}
					}
				}
			},
			{
				"name": "GetPIIDQchecks",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderStoredProcedureName": "[dbo].[GetDQChecks]",
						"storedProcedureParameters": {
							"PIITreatment": {
								"type": "String",
								"value": "TRUE"
							},
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "''"
						}
					}
				}
			},
			{
				"name": "TransientToRawToShield",
				"description": "This is the dataflow activity to move data form transient source to raw/trusted/shield",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "GetPIITreatments",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetPIIDQchecks",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetYear",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetMonth",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetDay",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetTimestamp",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetNonPIIDQchecks",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetTableMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "MasterRunIDSet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "1.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "data_movement_framework_v2",
						"type": "DataFlowReference",
						"parameters": {
							"fulltoken_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.fulltoken}'",
								"type": "Expression"
							},
							"partialtoken_email_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.partialtoken_email}'",
								"type": "Expression"
							},
							"partialtoken_iban_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.partialtoken_iban}'",
								"type": "Expression"
							},
							"partialtoken_date_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.partialtoken_date}'",
								"type": "Expression"
							},
							"pk_list": {
								"value": "'@{concat('\"',activity('GetTableMetadata').output.firstRow.index_column,'\"')}'",
								"type": "Expression"
							},
							"max_row_id": {
								"value": "@activity('GetTableMetadata').output.firstRow.prev_max_index",
								"type": "Expression"
							},
							"table_name": {
								"value": "'@{pipeline().parameters.table_name}'",
								"type": "Expression"
							},
							"pii_dq_checks": {
								"value": "@activity('GetPIIDQchecks').output.firstRow.dq_checks",
								"type": "Expression"
							},
							"non_pii_dq_checks": {
								"value": "@activity('GetNonPIIDQchecks').output.firstRow.dq_checks",
								"type": "Expression"
							},
							"timestamp": {
								"value": "'@{variables('timestamp')}'",
								"type": "Expression"
							},
							"fulltoken_unique_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.fulltoken_unique}'",
								"type": "Expression"
							},
							"conditional_fulltoken_unique_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.conditional_fulltoken_unique}'",
								"type": "Expression"
							},
							"conditional_fulltoken_condition": {
								"value": "@activity('GetPIITreatments').output.firstRow.condition",
								"type": "Expression"
							},
							"support_col_list": {
								"value": "'@{activity('GetPIITreatments').output.firstRow.support_col}'",
								"type": "Expression"
							},
							"pk_join_l": "toString(byName(concat(replace($pk_list,'\"',''),'_ORIG')))",
							"pk_join_r": "toString(byName(concat(replace($pk_list,'\"',''),'_TOKEN')))"
						},
						"datasetParameters": {
							"DataSource": {
								"country": {
									"value": "@activity('GetTableMetadata').output.firstRow.country_name",
									"type": "Expression"
								},
								"zone": {
									"value": "@pipeline().globalParameters.transient_zone_name",
									"type": "Expression"
								},
								"source": {
									"value": "@pipeline().parameters.source",
									"type": "Expression"
								},
								"year": {
									"value": "@formatDateTime(variables('date'),'yyyy')",
									"type": "Expression"
								},
								"month": {
									"value": "@formatDateTime(variables('date'),'MM')",
									"type": "Expression"
								},
								"day": {
									"value": "@variables('day')",
									"type": "Expression"
								},
								"table": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								},
								"file_timestamp": {
									"value": "@variables('timestamp')",
									"type": "Expression"
								}
							},
							"TransientBadDataShield": {
								"TABLE_NAME": "@pipeline().parameters.table_name",
								"zone": "@pipeline().globalParameters.transient_zone_name",
								"shield_db_name": "@pipeline().globalParameters.shield_db_name"
							},
							"RawZoneSink": {
								"country": {
									"value": "@activity('GetTableMetadata').output.firstRow.country_name",
									"type": "Expression"
								},
								"zone": {
									"value": "@pipeline().globalParameters.raw_zone_name",
									"type": "Expression"
								},
								"source": {
									"value": "@pipeline().parameters.source",
									"type": "Expression"
								},
								"year": {
									"value": "@variables('year')",
									"type": "Expression"
								},
								"month": {
									"value": "@variables('month')",
									"type": "Expression"
								},
								"day": {
									"value": "@variables('day')",
									"type": "Expression"
								},
								"table": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								},
								"file_timestamp": {
									"value": "@variables('timestamp')",
									"type": "Expression"
								}
							},
							"ShieldSink": {
								"TABLE_NAME": "@pipeline().parameters.table_name",
								"shield_db_name": "@pipeline().globalParameters.shield_db_name"
							},
							"RawBadDataShield": {
								"TABLE_NAME": "@pipeline().parameters.table_name",
								"zone": "@pipeline().globalParameters.raw_zone_name",
								"shield_db_name": "@pipeline().globalParameters.shield_db_name"
							},
							"TrustedZoneSink": {
								"country": {
									"value": "@activity('GetTableMetadata').output.firstRow.country_name",
									"type": "Expression"
								},
								"zone": {
									"value": "@pipeline().globalParameters.trusted_zone_name",
									"type": "Expression"
								},
								"source": {
									"value": "@pipeline().parameters.source",
									"type": "Expression"
								},
								"year": {
									"value": "@variables('year')",
									"type": "Expression"
								},
								"month": {
									"value": "@variables('month')",
									"type": "Expression"
								},
								"day": {
									"value": "@variables('day')",
									"type": "Expression"
								},
								"table": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								},
								"file_timestamp": {
									"value": "@variables('timestamp')",
									"type": "Expression"
								}
							}
						}
					},
					"staging": {
						"linkedService": {
							"referenceName": "dlalwcaelumdevdw01",
							"type": "LinkedServiceReference"
						},
						"folderPath": "fs01-dlalwcaelumdevdw01/staging"
					},
					"integrationRuntime": {
						"referenceName": "ahir-lw-caelum-dev-dw-03",
						"type": "IntegrationRuntimeReference"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "DateConditionalSet",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(pipeline().parameters.date)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SetCurrentTimestampFromParam",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "date",
								"value": {
									"value": "@pipeline().parameters.date",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SetCurrentTimestamp",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "date",
								"value": {
									"value": "@utcnow()",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "SetYear",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "DateConditionalSet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "year",
					"value": {
						"value": "@formatDateTime(variables('date'),'yyyy')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SetMonth",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "DateConditionalSet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "month",
					"value": {
						"value": "@formatDateTime(variables('date'),'MM')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SetDay",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "DateConditionalSet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "day",
					"value": {
						"value": "@formatDateTime(variables('date'),'dd')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SetTimestamp",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "DateConditionalSet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "timestamp",
					"value": {
						"value": "@formatDateTime(variables('date'),'yyyyMMddhhmmss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetNonPIIDQchecks",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderStoredProcedureName": "[dbo].[GetDQChecks]",
						"storedProcedureParameters": {
							"PIITreatment": {
								"type": "String",
								"value": "FALSE"
							},
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "''"
						}
					}
				}
			},
			{
				"name": "GetTableMetadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[GetTableMetadata]",
						"storedProcedureParameters": {
							"SourceName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.source",
									"type": "Expression"
								}
							},
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore_tablelist",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "MasterRunIDSet",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(pipeline().parameters.MasterRunID)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SetMasterRunID",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "MasterRunID",
								"value": {
									"value": "@pipeline().parameters.MasterRunID",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SetCurrentMasterRunID",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "MasterRunID",
								"value": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ConditionalLogging",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "SetDataflowMetrics",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(equals(variables('dataflow_metrics'),'{}'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "UpdateRawBadPipelineLog",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.raw_zone_name}-To-@{pipeline().globalParameters.shield_zone_name}' StepName,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.shield_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time},'@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateTransientBadPipelineLog",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.transient_zone_name}-To-@{pipeline().globalParameters.shield_zone_name}' StepName,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.shield_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten}+@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time},'@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateShieldPipelineLog",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n '@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.transient_zone_name}-ToPII-@{pipeline().globalParameters.shield_zone_name}' StepName,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.shield_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten}+@{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time},'@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.ShieldSink.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateTrustedPipelineLog",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateRawBadPipelineLog",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.raw_zone_name}-To-@{pipeline().globalParameters.trusted_zone_name}' StepName,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.trusted_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.RawBadDataShield.stages[0].time},'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name\n;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateRawPipelineLogForFail",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateTransientBadPipelineLog",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "UpdateRawTrustedPipelineLog",
									"dependencyConditions": [
										"Skipped"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}'  as RunId,\n'@{pipeline().globalParameters.transient_zone_name}-To-@{pipeline().globalParameters.raw_zone_name}' StepName,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten}as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.sinkProcessingTime})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.sinkProcessingTime},'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\n\nINSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n '@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.transient_zone_name}-To-@{pipeline().globalParameters.shield_zone_name}' StepName,\n'transient.@{pipeline().parameters.table_name}' as Source,\n'Shield.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'0' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n0 as copyDuration_in_secs,\n'None' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'sqlserver' as Sink_Type,\n'Skipped' as Execution_Status,\n'@{variables('date')}' as CopyActivity_Start_Time,\n'@{variables('date')}' as CopyActivity_End_Time,\n'0' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'0' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateRawTrustedPipelineLog",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateTransientBadPipelineLog",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.transient_zone_name}-To-@{pipeline().globalParameters.raw_zone_name}' StepName,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.stages[0].time})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.sinkProcessingTime} + @{activity('TransientToRawToShield').output.runStatus.metrics.TransientBadDataShield.stages[0].time},'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateTrustedPipelineLogForFail",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateRawBadPipelineLog",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "UpdateTrustedPipelineLog",
									"dependencyConditions": [
										"Skipped"
									]
								},
								{
									"activity": "UpdateEmptyTrustedPipelineLog",
									"dependencyConditions": [
										"Skipped"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.raw_zone_name}-To-@{pipeline().globalParameters.trusted_zone_name}' StepName,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.trusted_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.rowsWritten}' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n(@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.sinkProcessingTime})/1000 as copyDuration_in_secs,\n'@{activity('TransientToRawToShield').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.store}' as Sink_Type,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.stages[0].progressState}' as Execution_Status,\nDATEADD(ms,@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.sinkProcessingTime},'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.stages[0].lastUpdateTime}') as CopyActivity_Start_Time,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.stages[0].lastUpdateTime}' as CopyActivity_End_Time,\n'@{activity('TransientToRawToShield').output.runStatus.computeAcquisitionDuration}' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('TransientToRawToShield').output.runStatus.metrics.TrustedZoneSink.sinkProcessingTime}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\n\nINSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n '@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.raw_zone_name}-To-@{pipeline().globalParameters.shield_zone_name}' StepName,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.shield_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'0' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n0 as copyDuration_in_secs,\n'None' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'sqlserver' as Sink_Type,\n'Skipped' as Execution_Status,\n'@{variables('date')}' as CopyActivity_Start_Time,\n'@{variables('date')}' as CopyActivity_End_Time,\n'0' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'0' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "UpdateEmptyShieldPipelineLog",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateShieldPipelineLog",
									"dependencyConditions": [
										"Failed"
									]
								},
								{
									"activity": "ErrorPass",
									"dependencyConditions": [
										"Skipped"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n '@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.transient_zone_name}-ToPII-@{pipeline().globalParameters.shield_zone_name}' StepName,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.shield_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'0' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n0 as copyDuration_in_secs,\n'None' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'sqlserver' as Sink_Type,\n'Skipped' as Execution_Status,\n'@{variables('date')}' as CopyActivity_Start_Time,\n'@{variables('date')}' as CopyActivity_End_Time,\n'0' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'0' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "''"
									}
								}
							}
						},
						{
							"name": "ErrorPass",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateShieldPipelineLog",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": "SELECT 1",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "''"
									}
								}
							}
						},
						{
							"name": "UpdateEmptyTrustedPipelineLog",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "ErrorPassTrusted",
									"dependencyConditions": [
										"Skipped"
									]
								},
								{
									"activity": "UpdateTrustedPipelineLog",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": {
										"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'@{pipeline().globalParameters.raw_zone_name}-To-@{pipeline().globalParameters.trusted_zone_name}' StepName,\n'@{pipeline().globalParameters.raw_zone_name}.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.trusted_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'0' as rowsCopied,\n@{activity('TransientToRawToShield').output.runStatus.metrics.RawZoneSink.rowsWritten} as RowsRead,\n1 as No_ParallelCopies,\n0 as copyDuration_in_secs,\n'None' as effectiveIntegrationRuntime,\n'adlsgen2' as Source_Type,\n'sqlserver' as Sink_Type,\n'Skipped' as Execution_Status,\n'@{variables('date')}' as CopyActivity_Start_Time,\n'@{variables('date')}' as CopyActivity_End_Time,\n'0' as CopyActivity_queuingDuration_in_secs,\n'0' as CopyActivity_timeToFirstByte_in_secs,\n'0' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name;\nSELECT 1\n",
										"type": "Expression"
									},
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "pipeline_log"
									}
								}
							}
						},
						{
							"name": "ErrorPassTrusted",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateTrustedPipelineLog",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlMISource",
									"sqlReaderQuery": "SELECT 1",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metastore",
									"type": "DatasetReference",
									"parameters": {
										"table_name": "''"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "SetDataflowMetrics",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "TransientToRawToShield",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "dataflow_metrics",
					"value": {
						"value": "@string(activity('TransientToRawToShield').output.runStatus.metrics)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"date": {
				"type": "string"
			},
			"source": {
				"type": "string",
				"defaultValue": "NOVA"
			},
			"table_name": {
				"type": "string",
				"defaultValue": "NOVA_niAktGld"
			},
			"MasterRunID": {
				"type": "string"
			}
		},
		"variables": {
			"date": {
				"type": "String"
			},
			"year": {
				"type": "String"
			},
			"month": {
				"type": "String"
			},
			"day": {
				"type": "String"
			},
			"timestamp": {
				"type": "String"
			},
			"MasterRunID": {
				"type": "String"
			},
			"transient_bad_data_cnt": {
				"type": "String",
				"defaultValue": "0"
			},
			"raw_bad_data_cnt": {
				"type": "String",
				"defaultValue": "0"
			},
			"dataflow_metrics": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Caelum_Pipelines/2 transient_to_raw_to_trusted"
		},
		"annotations": [],
		"lastPublishTime": "2021-06-15T09:35:53Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}