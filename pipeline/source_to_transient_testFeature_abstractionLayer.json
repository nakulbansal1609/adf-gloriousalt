{
	"name": "source_to_transient_testFeature_abstractionLayer",
	"properties": {
		"activities": [
			{
				"name": "SourceToTransient",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "GetSourceMaxTimestamp",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "DateConditionalSet",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetTableMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "MasterRunIDSet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderQuery": {
							"value": "SELECT *\nFROM @{variables('database_name')}.@{variables('database_schema')}.@{pipeline().parameters.table_name}\nWHERE @{activity('GetTableMetadata').output.firstRow.delta_column} BETWEEN \n'@{activity('GetTableMetadata').output.firstRow.max_timestamp}' AND '@{activity('GetSourceMaxTimestamp').output.firstRow.timestamp}'\n",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "parameterizedNOVA",
						"type": "DatasetReference",
						"parameters": {
							"schema": "@variables('database_schema')",
							"table_name": "@pipeline().parameters.table_name",
							"server_path": "@variables('server_path')",
							"database_name": "@variables('database_name')"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "caelum_data_lake",
						"type": "DatasetReference",
						"parameters": {
							"country": {
								"value": "@activity('GetTableMetadata').output.firstRow.country_name",
								"type": "Expression"
							},
							"zone": {
								"value": "@pipeline().globalParameters.transient_zone_name",
								"type": "Expression"
							},
							"source": {
								"value": "@pipeline().parameters.source",
								"type": "Expression"
							},
							"year": {
								"value": "@formatDateTime(variables('date'),'yyyy')",
								"type": "Expression"
							},
							"month": {
								"value": "@formatDateTime(variables('date'),'MM')",
								"type": "Expression"
							},
							"day": {
								"value": "@formatDateTime(variables('date'),'dd')",
								"type": "Expression"
							},
							"table": {
								"value": "@pipeline().parameters.table_name",
								"type": "Expression"
							},
							"file_timestamp": {
								"value": "@formatDateTime(variables('date'),'yyyyMMddhhmmss')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "SetDatabaseForLoad",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetTableMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "database_name",
					"value": {
						"value": "@activity('GetTableMetadata').output.firstRow.system_db",
						"type": "Expression"
					}
				}
			},
			{
				"name": "UpdateMetadata",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SourceToTransient",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "GetSourceMaxIndex",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "UPDATE adf_metastore.dbo.table_list SET max_timestamp='@{activity('GetSourceMaxTimestamp').output.firstRow.timestamp}',\nmax_index=@{activity('GetSourceMaxIndex').output.firstRow.max_index}\nWHERE table_name='@{pipeline().parameters.table_name}'; \nSELECT 1\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "''"
						}
					}
				}
			},
			{
				"name": "GetSourceMaxTimestamp",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetDatabaseForLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetServerForLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetDBShemaForLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderQuery": {
							"value": "SELECT COALESCE(max(@{activity('GetTableMetadata').output.firstRow.delta_column}), '@{activity('GetTableMetadata').output.firstRow.max_timestamp}' ) timestamp\nFROM @{variables('database_name')}.dbo.@{pipeline().parameters.table_name}",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "parameterizedNOVA",
						"type": "DatasetReference",
						"parameters": {
							"schema": "@variables('database_schema')",
							"table_name": "@pipeline().parameters.table_name",
							"server_path": "@variables('server_path')",
							"database_name": "@variables('database_name')"
						}
					}
				}
			},
			{
				"name": "SetServerForLoad",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetTableMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "server_path",
					"value": {
						"value": "@activity('GetTableMetadata').output.firstRow.system_url",
						"type": "Expression"
					}
				}
			},
			{
				"name": "DateConditionalSet",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(pipeline().parameters.date)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SetCurrentTimestampFromParam",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "date",
								"value": {
									"value": "@pipeline().parameters.date",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SetCurrentTimestamp",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "date",
								"value": {
									"value": "@utcnow()",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "GetSourceMaxIndex",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetDatabaseForLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetServerForLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetDBShemaForLoad",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderQuery": {
							"value": "SELECT COALESCE(max(@{activity('GetTableMetadata').output.firstRow.index_column}),0)+@{activity('GetTableMetadata').output.firstRow.max_index} max_index\nFROM @{variables('database_name')}.@{variables('database_schema')}.@{pipeline().parameters.table_name}",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "parameterizedNOVA",
						"type": "DatasetReference",
						"parameters": {
							"schema": "@variables('database_schema')",
							"table_name": "@pipeline().parameters.table_name",
							"server_path": "@variables('server_path')",
							"database_name": "@variables('database_name')"
						}
					}
				}
			},
			{
				"name": "UpdatePipelineLog",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SourceToTransient",
						"dependencyConditions": [
							"Completed"
						]
					},
					{
						"activity": "GetSourceCount",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlMISource",
						"sqlReaderQuery": {
							"value": "INSERT INTO [adf_metastore].[dbo].[pipeline_log]\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'Source-To-@{pipeline().globalParameters.transient_zone_name}' StepName,\n'source.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('SourceToTransient').output.rowsCopied}' as rowsCopied,\n'@{activity('SourceToTransient').output.rowsRead}' as RowsRead,\n'@{activity('SourceToTransient').output.usedParallelCopies}' as No_ParallelCopies,\n'@{activity('SourceToTransient').output.copyDuration}' as copyDuration_in_secs,\n'@{activity('SourceToTransient').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('SourceToTransient').output.executionDetails[0].source.type}' as Source_Type,\n'@{activity('SourceToTransient').output.executionDetails[0].sink.type}' as Sink_Type,\n'@{activity('SourceToTransient').output.executionDetails[0].status}' as Execution_Status,\n'@{activity('SourceToTransient').output.executionDetails[0].start}' as CopyActivity_Start_Time,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{activity('SourceToTransient').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_queuingDuration_in_secs,\n'@{activity('SourceToTransient').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('SourceToTransient').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name\n--,' ' as output_url\nUNION\nSELECT '@{pipeline().DataFactory}' as DataFactory_Name,\n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{variables('MasterRunID')}' as RunId,\n'SourceCount' StepName,\n'source.@{pipeline().parameters.table_name}' as Source,\n'@{pipeline().globalParameters.transient_zone_name}.@{pipeline().parameters.table_name}' as Destination,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('SourceToTransient').output.rowsCopied}' as rowsCopied,\n'@{activity('GetSourceCount').output.firstRow.counter}' as RowsRead,\n'@{activity('SourceToTransient').output.usedParallelCopies}' as No_ParallelCopies,\n'@{activity('SourceToTransient').output.copyDuration}' as copyDuration_in_secs,\n'@{activity('SourceToTransient').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('SourceToTransient').output.executionDetails[0].source.type}' as Source_Type,\n'@{activity('SourceToTransient').output.executionDetails[0].sink.type}' as Sink_Type,\n'@{activity('SourceToTransient').output.executionDetails[0].status}' as Execution_Status,\n'@{activity('SourceToTransient').output.executionDetails[0].start}' as CopyActivity_Start_Time,\n'@{utcnow()}' as CopyActivity_End_Time,\n'@{activity('SourceToTransient').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivity_queuingDuration_in_secs,\n'@{activity('SourceToTransient').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivity_timeToFirstByte_in_secs,\n'@{activity('SourceToTransient').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivity_transferDuration_in_secs\n,'@{pipeline().parameters.table_name}' as table_name\n;\nSELECT * FROM [adf_metastore].[dbo].[pipeline_log]\nWHERE pipeline_name='@{pipeline().RunId}'",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "pipeline_log"
						}
					}
				}
			},
			{
				"name": "GetTableMetadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[GetTableMetadata]",
						"storedProcedureParameters": {
							"SourceName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.source",
									"type": "Expression"
								}
							},
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore_tablelist",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "MasterRunIDSet",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(pipeline().parameters.MasterRunID)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SetMasterRunID",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "MasterRunID",
								"value": {
									"value": "@pipeline().parameters.MasterRunID",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SetCurrentMasterRunID",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "MasterRunID",
								"value": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "SetDBShemaForLoad",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetTableMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "database_schema",
					"value": {
						"value": "@activity('GetTableMetadata').output.firstRow.system_db_schema",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetTablePreTransformations",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SourceToTransient",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[dbo].[GetPreTransformations]",
						"storedProcedureParameters": {
							"TableName": {
								"type": "String",
								"value": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metastore",
						"type": "DatasetReference",
						"parameters": {
							"table_name": {
								"value": "@pipeline().parameters.table_name",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "IfAnyPreTransformations",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "GetTablePreTransformations",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('GetTablePreTransformations').output.firstRow.table_preTrans,null)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "DataPreTransformations_copy1",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/caelum/adf-pretransformations/adf_preTrans",
								"baseParameters": {
									"country": {
										"value": "@activity('GetTableMetadata').output.firstRow.country_name",
										"type": "Expression"
									},
									"zone": {
										"value": "@pipeline().globalParameters.transient_zone_name",
										"type": "Expression"
									},
									"source": {
										"value": "@pipeline().parameters.source",
										"type": "Expression"
									},
									"year": {
										"value": "@formatDateTime(variables('date'),'yyyy')",
										"type": "Expression"
									},
									"month": {
										"value": "@formatDateTime(variables('date'),'MM')",
										"type": "Expression"
									},
									"day": {
										"value": "@formatDateTime(variables('date'),'dd')",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									},
									"file_timestamp": {
										"value": "@formatDateTime(variables('date'),'yyyyMMddhhmmss')",
										"type": "Expression"
									},
									"sql_definitions": {
										"value": "@activity('GetTablePreTransformations').output.firstRow.table_preTrans",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "AzureDatabricks1",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "GetSourceCount",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "GetSourceMaxTimestamp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "SELECT COUNT(1) counter\nFROM @{variables('database_name')}.@{variables('database_schema')}.@{pipeline().parameters.table_name}\nWHERE @{activity('GetTableMetadata').output.firstRow.delta_column} BETWEEN \n'@{activity('GetTableMetadata').output.firstRow.max_timestamp}' AND '@{activity('GetSourceMaxTimestamp').output.firstRow.timestamp}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "testSqlServer",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"table_name": {
				"type": "string",
				"defaultValue": "NOVA_ncGrupp"
			},
			"source": {
				"type": "string",
				"defaultValue": "NOVA"
			},
			"date": {
				"type": "string"
			},
			"MasterRunID": {
				"type": "string"
			}
		},
		"variables": {
			"date": {
				"type": "String"
			},
			"server_path": {
				"type": "String"
			},
			"database_name": {
				"type": "String"
			},
			"MasterRunID": {
				"type": "String"
			},
			"database_schema": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Testing_Pipelines"
		},
		"annotations": [],
		"lastPublishTime": "2021-06-14T09:09:15Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}